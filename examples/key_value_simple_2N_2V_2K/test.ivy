#lang ivy1.7

################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################

type key
type value
type node

relation table(N:node, K:key, V:value)
relation owner(N:node, K:key)
relation transfer_msg(N:node, K:key, V:value)

after init {
    table(N, K, V) := false;
    transfer_msg(N, K, V) := false;
    assume(owner(N1, K) & owner(N2, K) -> N1 = N2);
}

action reshard(n1: node, n2:node, k: key, v: value) = {
    assume table(n1, k, v);
    table(n1, k, v) := false;
    owner(n1, k) := false;
    transfer_msg(n2, k, v) := true;
}

action recv_transfer_msg(n: node, k: key, v: value) = {
    assume transfer_msg(n, k, v);
    transfer_msg(n, k, v) := false;
    table(n, k, v) := true;
    owner(n, k) := true;
}

action put(n: node, k: key, v: value) = {
    assume owner(n, k);
    table(n, k, V) := false;
    table(n, k, v) := true;
}

export reshard
export recv_transfer_msg
export put

# The safety property:
invariant [safety] (table(N1, K, V1) & table(N2, K, V2)) -> (N1 = N2 & V1 = V2) # keys unique

# conjecture owner(N1, K) & owner(N2, K) -> N1 = N2
# conjecture table(N, K, V) -> owner(N, K)

# conjecture ~(transfer_msg(N1, K, V) & owner(N2, K))
# conjecture transfer_msg(N1, K, V1) & transfer_msg(N2, K, V2) -> N1 = N2 & V1 = V2
